"use strict";

const ensureString       = require("es5-ext/object/validate-stringifiable-value")
    , reEscape           = require("es5-ext/reg-exp/escape")
    , { resolve, sep }   = require("path")
    , lstat              = require("fs2/lstat")
    , writeFile          = require("fs2/write-file")
    , resolveModulePaths = require("./resolve-module-paths")
    , testIndexName      = require("./lib/test-index-name");

const { push } = Array.prototype, sepRe = new RegExp(reEscape(sep), "gu");

module.exports = async function (path) {
	path = resolve(ensureString(path));
	const testPath = resolve(path, "test"), modulesTestsData = [], indexTestsData = [];
	const modulesData = await Promise.all(
		(await resolveModulePaths(path)).map(async modulePath => ({
			modulePath,
			stats: await lstat(resolve(testPath, modulePath), { loose: true })
		}))
	);
	for (const { modulePath, stats } of modulesData) {
		if (stats && stats.isFile()) {
			modulesTestsData.push(
				`require(${ JSON.stringify(`./test/${ modulePath.replace(sepRe, "/") }`) });`
			);
			indexTestsData.push(
				`\tt.pass(${ JSON.stringify(`Tests found for '${ modulePath }'`) });`
			);
		} else {
			indexTestsData.push(
				`\tt.fail(${ JSON.stringify(`Tests missing for '${ modulePath }'`) });`
			);
		}
	}
	const srcCode = [
		"// DO NOT EDIT: FILE GENERATED BY 'tape-index'", "", "\"use strict\";", "",
		"Error.stackTraceLimit = Infinity;", ""
	];

	srcCode.push("", "var test = require(\"tape\");");

	srcCode.push("", "test(\"Modules coverage\", function (t) {");
	push.apply(srcCode, indexTestsData);
	srcCode.push("\tt.end();", "});");

	srcCode.push("", "// Actual tests");
	push.apply(srcCode, modulesTestsData);
	srcCode.push("");

	return writeFile(resolve(path, `${ testIndexName }.js`), srcCode.join("\n"));
};
